# -*- coding: utf-8 -*-
"""logs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aSBgPMvRGY9Dn5IVvJ2mKMuhsUGsBCSO
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Simulated experiment settings
duration = 60  # seconds
time = np.linspace(0, duration, num=duration)

# Generate realistic throughput (Mbps), RTT (ms), and loss rate (%)
def simulate_data(protocol, scenario):
    np.random.seed(hash(protocol + scenario) % 2**32)
    if scenario == "low_latency_high_bw":
        if protocol == "BBR":
            throughput = np.clip(np.random.normal(45, 2, size=duration), 40, 50)
            rtt = np.clip(np.random.normal(12, 1.5, size=duration), 10, 20)
            loss = np.clip(np.random.normal(0.1, 0.05, size=duration), 0, 0.5)
        elif protocol == "Copa":
            throughput = np.clip(np.random.normal(42, 2.5, size=duration), 35, 46)
            rtt = np.clip(np.random.normal(11, 1.2, size=duration), 9, 18)
            loss = np.clip(np.random.normal(0.05, 0.02, size=duration), 0, 0.3)
        else:  # Vegas
            throughput = np.clip(np.random.normal(35, 3, size=duration), 25, 40)
            rtt = np.clip(np.random.normal(10, 1.5, size=duration), 8, 18)
            loss = np.clip(np.random.normal(0.02, 0.01, size=duration), 0, 0.1)
    else:  # high_latency_low_bw
        if protocol == "BBR":
            throughput = np.clip(np.random.normal(0.9, 0.1, size=duration), 0.7, 1.1)
            rtt = np.clip(np.random.normal(210, 15, size=duration), 190, 250)
            loss = np.clip(np.random.normal(1.5, 0.3, size=duration), 0.8, 3)
        elif protocol == "Copa":
            throughput = np.clip(np.random.normal(0.8, 0.1, size=duration), 0.6, 1.0)
            rtt = np.clip(np.random.normal(180, 10, size=duration), 160, 200)
            loss = np.clip(np.random.normal(0.8, 0.2, size=duration), 0.4, 1.5)
        else:  # Vegas
            throughput = np.clip(np.random.normal(0.6, 0.1, size=duration), 0.4, 0.8)
            rtt = np.clip(np.random.normal(170, 10, size=duration), 150, 190)
            loss = np.clip(np.random.normal(0.5, 0.1, size=duration), 0.2, 1.0)

    return pd.DataFrame({
        "time": time,
        "throughput_Mbps": throughput,
        "rtt_ms": rtt,
        "loss_percent": loss
    })

# Simulate for all combinations
protocols = ["BBR", "Copa", "Vegas"]
scenarios = ["low_latency_high_bw", "high_latency_low_bw"]
results = {}

for protocol in protocols:
    for scenario in scenarios:
        key = f"{protocol}_{scenario}"
        results[key] = simulate_data(protocol, scenario)

results["BBR_low_latency_high_bw"].head()  # Preview one result set